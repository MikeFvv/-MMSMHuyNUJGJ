apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]


apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        applicationId "com.skycprn"
        multiDexEnabled true
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [
                JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
                APP_CHANNEL: "developer-default"    //应用渠道号, 默认即可
        ]

    }
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }

    dexOptions {
        preDexLibraries true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

  productFlavors {
//      qitiancai1{
//         applicationId "com.bxvip.app.qtcaicad1"
//         manifestPlaceholders = [
//                   JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                  APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//               app_icon   : "@mipmap/logo"]
//     }
//     qitiancai2{
//           applicationId "com.bxvip.app.qtcaicad2"
//           manifestPlaceholders = [
//                     JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                     APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//                    app_icon   : "@mipmap/logo"]
//         }
//        dafa1{
//             applicationId "com.bxvip.app.dafa01"
//            manifestPlaceholders = [
//                    JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                     APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//                     app_icon   : "@mipmap/logo"]
//         }
//        dafa2{
//             applicationId "com.bxvip.app.cpbang02"
//             manifestPlaceholders = [
//                    JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                     APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//                     app_icon   : "@mipmap/logo"]
//        }
//       cpbang1{
//             manifestPlaceholders = [
//                     JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                    APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//                    app_icon   : "@mipmap/logo"]
//             applicationId "com.bxvip.app.cpbang01"
//        }
//       cpbang2{
//             applicationId "com.bxvip.app.cpbang02"
//             manifestPlaceholders = [
//                     JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                     APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//                     app_icon   : "@mipmap/logo"]
//         }
//         haocaiaa{
//           applicationId "com.bxvip.app.haocaiaa"
//           manifestPlaceholders = [
//                   JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                   APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//                   app_icon   : "@mipmap/logo"]
//       }
//       haocaiff{
//           applicationId "com.bxvip.app.haocaiff"
//           manifestPlaceholders = [
//                   JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                   APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//                   app_icon   : "@mipmap/logo"]
//       }
//
//       _567cai01{
//           applicationId "com.bxvip.app.bx567cai1"
//           manifestPlaceholders = [
//                   JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                   APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//                   app_icon   : "@mipmap/logo"]
//       }
//       _567cai02{
//           applicationId "com.bxvip.app.bx567cai2"
//           manifestPlaceholders = [
//                   JPUSH_APPKEY: "1bbe6c40ea94556d44012dd9", //在此替换你的 APPKey
//                   APP_CHANNEL: "developer-default",   //应用渠道号, 默认即可
//                   app_icon   : "@mipmap/logo"]
//       }
    }
    sourceSets {
       /* main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['libs']

        }*/
       // version2.res.srcDirs = ['src/version2/res']*/

    }
}
apply plugin: 'com.bugtags.library.plugin' //测试
//Bugtags 插件配置
bugtags {
    //自动上传符号表功能配置，如果需要根据 build varint 配置，请参考帮助中心->符号表->Android 符号表->配置自动上传符号表
    appKey "8d52d16417f77541ae28f71fdacc5e15"  //这里是你的 appKey
    appSecret "APP_SECRET"    //这里是你的 appSecret，管理员在设置页可以查看
    mappingUploadEnabled true
    //网络跟踪功能配置(企业版)
    trackingNetworkEnabled true
}
def sVzokhttplibrary = "0.0.3"// maven OK HTTP 库版本
def sVzappupdatelibrary = "0.3.2" // maven 更新app 库版本

dependencies {
    compile project(':react-native-vector-icons')
    compile project(':react-native-shake-event')
    compile project(':react-native-picker')
    compile project(':jpush-react-native')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.facebook.react:react-native:+'
    compile project(':react-native-code-push')
    compile project(':react-native-image-picker')
    compile project(':react-native-fetch-blob')
    compile "com.facebook.stetho:stetho:1.3.1"
    //极光推送
    compile project(':jcore-react-native')  // 添加 jcore 依赖
    compile 'com.bugtags.library:bugtags-lib:latest.integration' //测试
    //版本更新
    compile "com.eleven.android.sdk:vzokhttplibrary:$sVzokhttplibrary@aar"
    compile "com.eleven.android.sdk:vzappupdatelibrary:$sVzappupdatelibrary@aar"
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.squareup.okhttp3:okhttp:3.8.1'

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
